summarize(fit)
summarise(fit)
??summarise
summary(fit)
e <- resid(fit)
sqe <- e*e
res.var <- sum(sqe) / (length(e) - 2)
sqrt(res.var)
# Question 3
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
exp <- fit$coefficients[1] + mean(wt) * fit$coefficients[2]
exp - 2 * 0.5591
?mtcars
# Question 5
summary(fit)
fit[[1]][1] + 3 * fit[[1]][2]
# Question 6
summary(fit)
2 * (fit$coefficients[2] - 2 * 0.5591)
# Question 9
attributes(fit)
w.c <- fit$residuals ^ 2
fit.c <- lm(mpg ~ 1, mtcars)
fit.c.res <- fit.c$residuals ^ 2
sum(fit.c.res)
sum(w.c) /sum(fit.c.res)
?mtcars
# Question 3
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
exp <- fit$coefficients[1] + mean(wt) * fit$coefficients[2]
exp - 2 * 0.5591
# Question 4
?mtcars
# Question 5
summary(fit)
fit[[1]][1] + 3 * fit[[1]][2]
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit<-lm(x~y)
summary(fit)
e <- resid(fit)
sum(e)
c<-5
cf1<-summary(fit)$coefficients
cf1
fit4<-lm(y~I(x+c)) # add some constant c
cf2<-summary(fit4)$coefficients
cf2
b0<-cf1[1,1]
b1<-cf1[2,1]
c(b0,b1)
data(mtcars)
datum<-data(mtcars)
datum<-data
attach(mtcars)
View(mtcars)
fit <- ln(mpg ~ c(cyl,wt), mtcars)
fit <- lm(mpg ~ c(cyl,wt), mtcars)
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)
fit2 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit2)
fit3 <- lm(mpg ~ factor(cyl) + wt + interaction(cyl, wt), data = mtcars)
compare <- anova(fit1, fit2)
compare <- anova(fit, fit2)
compare$Pr
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
dfbetas(fit)
lm.influence(fit)$hat
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
dfbetas(fit)
lm.influence(fit)$hat
#Q1
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)
#Q2
fit2 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit2)
fit3 <- lm(mpg ~ factor(cyl) + wt + interaction(cyl, wt), data = mtcars)
compare <- anova(fit, fit2)
compare$Pr
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
lm.influence(fit)$hat
#Q1
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)
#Q2
fit2 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit2)
#Q3
fit3 <- lm(mpg ~ factor(cyl) + wt + interaction(cyl, wt), data = mtcars)
compare <- anova(fit, fit2)
compare$Pr
?mtcars
data(mtcars)
fit <- lm(mpg ~ factor(am), data = mtcars)
summary(fit)
?step
init_fit <- lm(mpg ~ ., data = mtcars)
summary(init_fit)%coef
summary(init_fit)$coef
opts_chunk$set(echo = TRUE)
data(mtcars)
library(knitr)
opts_chunk$set(echo = TRUE)
best_fit <- step(init_fit, direction = "both")
summary(best_fit)
best_fit <- step(init_fit, direction = "both")
s_fit <- lm(mpg ~ am, data = mtcars)
summary(s_fit)
s_fit <- lm(mpg ~ am, data = mtcars)
summary(s_fit)
```
###Comparing all models
We can compare this best model and the initial model with a simple model that uses only the transmission type, am, as a predictor for mpg. p-value of the best model is very low, so we can confidently reject the null hypothesis that these variables do not contribute to the model fit.
Same time, p-value for the simple model, compared to the best model, is very high and thus we cannot reject the null hypothesis that the additional variables it includes do not contribute.
```{r, echo = TRUE}
anova(simple_fit,best_fit,init_fit)
anova(s_fit,best_fit,init_fit)
test_vars <- c('mpg','cyl','disp','hp','wt','gear','carb')
pairs(x = mtcars[,test_vars],
panel = panel.smooth,
main = 'MTCars Attributes')
test_vars <- c('mpg','cyl','disp','hp','wt','gear','carb')
pairs(x = mtcars[,test_vars],
panel = panel.smooth,
main = 'Pairs plot, mtcars data')
test_vars <- c('mpg','cyl','disp','hp','wt','gear','carb')
pairs(x = mtcars[,test_vars],
main = 'Pairs plot, mtcars data')
?pairs
boxplot(mpg ~ am, data = mtcars,
xlab = "Transmission type", ylab = "Miles per gallon",
main = "MPG vs Transmission", col = c("black", "steelblue"),
names = c("Automatic", "Manual"))
head(cov2cor(cov(sapply(mtcars, as.numeric))), 1)
layout(matrix(c(1,2,3,4),2,2))
plot(best_fit)
//layout(matrix(c(1,2,3,4),2,2))
#layout(matrix(c(1,2,3,4),2,2))
plot(best_fit)
```{r, fig.cap="Figure 3", fig.width=1024}
#layout(matrix(c(1,2,3,4),2,2))
plot(best_fit)
?plot
plot(best_fit)
# Question 1
library(MASS)
?shuttle
data(shuttle)
str(shuttle)
names(shuttle)
?glm
fit <- glm(use ~ wind, family='binomial', shuttle)
exp(fit$coeff)
fit <- glm(use ~ wind + as.factor(magn), family='binomial', shuttle)
exp(fit$coeff)
data(InsectSprays)
outp <- exp(coef(glm(count ~ as.factor(spray) - 1, family="poisson", InsectSprays)))
outp
outp[1]/outp[2]
?offset
log(10)
?offset
# Question 6
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
# y = c + d1 * x + d2 * x
summary(lm(y ~ d1*x))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
summary(lm(y ~ d1*x))
library(MASS)
?shuttle
data(shuttle)
str(shuttle)
names(shuttle)
?glm
fit <- glm(use ~ wind, family='binomial', shuttle)
exp(fit$coeff)
# Question 2
fit <- glm(use ~ wind + as.factor(magn), family='binomial', shuttle)
exp(fit$coeff)
#Q3
LogiRegUseMinus<-glm((1-shuttle$use)~shuttle$wind,family="binomial")
glm(formula = 1-use ~ factor(wind), family = binomial(logit), data = shuttle1)
LogiRegUseMinus<-glm((1-shuttle$use)~shuttle$wind,family="binomial")
glm(formula = 1-use ~ factor(wind), family = binomial(logit), data = shuttle)
1-0.03181
library(MASS)
shuttle1<-shuttle
levels(shuttle1$use)[1]<-"1"
levels(shuttle1$use)[2]<-"0"
shuttle1$use<-as.numeric(as.character(shuttle1$use))
glm(formula = use ~ factor(wind), family = binomial(logit), data = shuttle1)
1/exp(0.03181)
#Q2
summary(logRegshuttle <- glm(use ~ wind,family="binomial", data=shuttle1))
glm(formula = use ~ factor(wind)+magn, family = binomial(logit), data = shuttle1)
1/exp(0.03201)
#Q3
LogiRegUseMinus<-glm((1-shuttle$use)~shuttle$wind,family="binomial")
glm(formula = 1-use ~ factor(wind), family = binomial(logit), data = shuttle1)
#Q5
y=c(1:10)
x=y-1+rnorm(10)/10
z=c(1:10)
z=z*2
summary(lm(y~x+offset(z)))
z=z*4
summary(lm(y~x+offset(z)))
z=z+5
summary(lm(y~x+offset(z)))
z=z+100
summary(lm(y~x+offset(z)))
z=z/10
summary(lm(y~x+offset(z)))
z=z+log(10)
summary(lm(y~x+offset(z)))
y=c(1:10)
x=y-1+rnorm(10)/10
z=c(1:10)
z=z*2
summary(lm(y~x+offset(z)))
z=z+log(10)
summary(lm(y~x+offset(z)))
1-0.03181
glm(formula = use ~ factor(wind), family = binomial(logit), data = shuttle1)
glm(formula = 1-use ~ factor(wind), family = binomial(logit), data = shuttle1)
df <- read.fwf('/Users/casy/Dropbox/My_Projects/Coursera/Coursera_cleaning/getdata-wksst8110.for', 3, header = F, sep = "\t",
skip = 4)
head(df)
df <- read.fwf('/Users/casy/Dropbox/My_Projects/Coursera/Coursera_cleaning/getdata-wksst8110.for', 13, header = F, sep = "\t",
skip = 4)
head(df)
df <- read.fwf('/Users/casy/Dropbox/My_Projects/Coursera/Coursera_cleaning/getdata-wksst8110.for', c(13,26,39,52), header = F, sep = "\t",
skip = 4)
head(df)
df <- read.fwf('/Users/casy/Dropbox/My_Projects/Coursera/Coursera_cleaning/getdata-wksst8110.for', c(13,26,39,52), header = T, sep = "\t",
skip = 3)
head(df)
df <- read.fwf('/Users/casy/Dropbox/My_Projects/Coursera/Coursera_cleaning/getdata-wksst8110.for', c(13,26,39,52), header = F, sep = "\t",
skip = 3)
head(df)
df <- read.fwf('/Users/casy/Dropbox/My_Projects/Coursera/Coursera_cleaning/getdata-wksst8110.for', c(13,26,39,52), header = F, sep = "\t",
skip = 4)
head(df)
df <- read.fwf('/Users/casy/Dropbox/My_Projects/Coursera/Coursera_cleaning/getdata-wksst8110.for', c(13,20,26,33,39,46,52,59), header = F, sep = "\t",
skip = 4)
head(df)
head(df[,4])
sum(df[,4])
sum(df[,3])
head(df[,3])
df <- read.fwf('/Users/casy/Dropbox/My_Projects/Coursera/Coursera_cleaning/getdata-wksst8110.for', c(13,20,25,33,39,46,52,59), header = F, sep = "\t",
skip = 4)
head(df[,3])
df
head(df)
df <- read.fwf('/Users/casy/Dropbox/My_Projects/Coursera/Coursera_cleaning/getdata-wksst8110.for', c(16,4,9,4,9,4,9,4), header = F, sep = "\t",
skip = 4)
head(df)
df <- read.fwf('/Users/casy/Dropbox/My_Projects/Coursera/Coursera_cleaning/getdata-wksst8110.for', c(15,4,9,4,9,4,9,4), header = F, sep = "\t",
skip = 4)
head(df)
df[,3]
sum(df[,3])
sum(df[,4])
dir <- '/Users/casy/Dropbox/My_Projects/Coursera/Coursera_cleaning/q3/'
setwd(dir)
if(!file.exists("data")){
dir.create("data")
}
df = read.csv ("./data/datum.csv", header = TRUE)
head(df)
areaPtrn <- df$ACR==3
agrPtrn <- df$AGS==6
agricultureLogical <- areaPtrn & agrPtrn
agricultureLogical
head(which(agricultureLogical),n=3)
# Q2
library(jpeg)
image <- readJPEG("getdata-jeff.jpg", native = TRUE)
quantile(image, c(.3, .8))
library(plyr)
df = read.csv ("./data/countries.csv", header = FALSE)
df2 = read.csv ("./data/education.csv", header = TRUE)
head(df2)
head(df)
colnames(df) <- c("CountryCode","rank","something","Country","gdp","c","d","f","g","q")
df <- df[df$CountryCode!='',]
df <- df[,c("CountryCode","rank","Country","gdp")]
df2 <- df2[,c("CountryCode","Income.Group")]
mergedDF <- merge(df,df2,by="CountryCode")
mergedDF$rank <- as.numeric(levels(mergedDF$rank))[mergedDF$rank]
mergedDF <- mergedDF[!is.na(mergedDF$rank),]
sortedDF <- mergedDF[order(-mergedDF$rank),]
sortedDF[13,]
nrows(sortedDF)
nrow(sortedDF)
mean(sortedDF[sortedDF$Income.Group=="High income: OECD",]$rank)
sortedDF$rankQuantiles <- cut(sortedDF$rank, breaks=c(0,38,50))
table(sortedDF$rankQuantiles, sortedDF$Income.Group)
dir <- '/Users/casy/Dropbox/My_Projects/Coursera/Coursera_cleaning/Getting-and-Cleaning-Data/'
setwd(dir)
dir <- '/Users/casy/Dropbox/My_Projects/Coursera/Coursera_cleaning/Getting-and-Cleaning-Data/'
setwd(dir)
sybj <- read.table('data/test/subject_test.txt', headers=F, sep=' ', "\"'", dec = ".")
datum <- read.table('data/test/X_test.txt', headers=F, sep=' ', "\"'", dec = ".")
sybj <- read.table('data/test/subject_test.txt', headers=FALSE, sep=' ', "\"'", dec = ".")
sybj <- read.table('data/test/subject_test.txt', header=FALSE, sep=' ', "\"'", dec = ".")
datum <- read.table('data/test/X_test.txt', header=FALSE, sep=' ', "\"'", dec = ".")
labels <- read.table('data/test/y_test.txt', header=FALSE, sep=' ', "\"'", dec = ".")
sybj <- read.table('data/test/subject_test.txt', header=FALSE, sep='', "\"'", dec = ".")
datum <- read.table('data/test/X_test.txt', header=FALSE, sep='', "\"'", dec = ".")
View(labels)
View(labels)
datum <- read.table('data/test/X_test.txt', header=FALSE, sep='', "\"'", dec = ".")
View(datum)
View(labels)
datum$labels <-labels
View(datum)
View(labels)
View(labels)
datum$labels <-labels$V1
View(datum)
datum$labels
datum$subject <- sybj$V1
sybj <- read.table('data/train/subject_train.txt', header=FALSE, sep='', "\"'", dec = ".")
labels <- read.table('data/test/y_train.txt', header=FALSE, sep='', "\"'", dec = ".")
sybj <- read.table('data/train/subject_train.txt', header=FALSE, sep='', "\"'", dec = ".")
labels <- read.table('data/train/y_train.txt', header=FALSE, sep='', "\"'", dec = ".")
trainDatum <- read.table('data/train/X_train.txt', header=FALSE, sep='', "\"'", dec = ".")
trainDatum$labels <-labels$V1
trainDatum$subject <- sybj$V1
sybj <- read.table('data/test/subject_test.txt', header=FALSE, sep='', "\"'", dec = ".")
labels <- read.table('data/test/y_test.txt', header=FALSE, sep='', "\"'", dec = ".")
testDatum <- read.table('data/test/X_test.txt', header=FALSE, sep='', "\"'", dec = ".")
testDatum$labels <-labels$V1
testDatum$subject <- sybj$V1
datum <- rbind(textDatum, trainDatum)
datum <- rbind(testDatum, trainDatum)
colnames <- read.table('data/features.txt', header=FALSE, sep='', "\"'", dec = ".")
View(colnames)
sybj <- read.table('data/test/subject_test.txt', header=FALSE, sep='', "\"'", dec = ".")
labels <- read.table('data/test/y_test.txt', header=FALSE, sep='', "\"'", dec = ".")
testDatum <- read.table('data/test/X_test.txt', header=FALSE, sep='', "\"'", dec = ".")
names(testDatum)<- colnames$V2
testDatum$labels <-labels$V1
testDatum$subject <- sybj$V1
View(testDatum)
sybj <- read.table('data/train/subject_train.txt', header=FALSE, sep='', "\"'", dec = ".")
labels <- read.table('data/train/y_train.txt', header=FALSE, sep='', "\"'", dec = ".")
trainDatum <- read.table('data/train/X_train.txt', header=FALSE, sep='', "\"'", dec = ".")
names(trainDatum)<- colnames$V2
trainDatum$labels <-labels$V1
trainDatum$subject <- sybj$V1
#1. Merges the training and the test sets to create one data set.
datum <- rbind(testDatum, trainDatum)
datum$subject
View(labels)
View(colnames)
View(labels)
checkName <- function(name){
any(lapply(grep(x,name),c("mean()",'std()','labels','labels'))
}
checkName <- function(name){
any(lapply(c("mean()",'std()','labels','labels'),grep(x,name))
}
checkName <- function(name){
return any(lapply(c("mean()",'std()','labels','labels'),grep(x,name))
}
checkName <- function(name){
r <- any(lapply(c("mean()",'std()','labels','labels'),grep(x,name))
return(r)
}
checkName <- function(name){
r <- any(lapply(c("mean()",'std()','labels','labels'),grep(x,name))
return(r)
}
checkName <- function(name){
r <- any(lapply(c("mean()",'std()','labels','labels'),grep(x,name))
return(r)
checkName <- function(name){
r <- any(lapply(c("mean()",'std()','labels','labels'),grep(x,name)))
return(r)
}
checkName('sxdv-std()')
checkName <- function(name){
r <- any(lapply(c("mean()",'std()','labels','labels'),function(x) grep(x,name)))
return(r)
}
checkName('sxdv-std()')
checkName <- function(name){
r <- any(apply(c("mean()",'std()','labels','labels'),function(x) grep(x,name)))
return(r)
}
checkName('sxdv-std()')
checkName <- function(name){
r <- any(apply(c("mean()",'std()','labels','labels'),1,function(x) grep(x,name)))
return(r)
}
checkName('sxdv-std()')
checkName <- function(name){
r <- any(vapply(c("mean()",'std()','labels','labels'),1,function(x) grep(x,name)))
return(r)
}
checkName('sxdv-std()')
checkName <- function(name){
r <- any(vapply(c("mean()",'std()','labels','labels'),function(x) grep(x,name)))
return(r)
}
checkName('sxdv-std()')
checkName <- function(name){
r <- any(lapply(c("mean()",'std()','labels','labels'),function(x) grep(x,name)))
return(r)
}
checkName('sxdv-std()')
checkName('sxdv')
checkName <- function(name){
r <- any(lapply(c("mean()",'std()','labels','labels'),function(x) grep(x,name)), F)
return(r)
}
checkName('sxdv')
checkName <- function(name){
#r <- any(lapply(c("mean()",'std()','labels','labels'),function(x) grep(x,name)), F)
r <- any(sapply(c("mean()",'std()','labels','labels'), grepl, name, fixed = TRUE))
return(r)
}
checkName('sxdv')
checkName('sxdvstd()')
sapply(names(datum), checkName)
checkName <- function(name){
#deside if we need this column to stay
r <- any(sapply(c("mean()",'std()','labels','subject'), grepl, name, fixed = TRUE))
return(r)
}
filter <- lapply(names(datum), checkName)
dataTiny <- datum[,filter]
filter <- sapply(names(datum), checkName)
dataTiny <- datum[,filter]
View(dataTiny)
View(dataTiny)
dataTiny$labels <- as.factor(dataTiny$labels)
dataTiny$subject <- as.factor(dataTiny$subject)
View(dataTiny)
library(plyr)
mapvalues(dataTiny$labels, from = c("1", "2","3","4","5","6"), to = c("WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS", "SITTING", "STANDING" ,"LAYING"))
View(dataTiny)
dataTiny$labels <- mapvalues(dataTiny$labels, from = c("1", "2","3","4","5","6"), to = c("WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS", "SITTING", "STANDING" ,"LAYING"))
View(dataTiny)
aggregated <- ddply(dataTiny,.(labels,subject),mean)
warnings()
View(aggregated)
aggregated <- ddply(dataTiny,.(labels,subject),summarise, mean)
aggregated <- ddply(dataTiny,.(labels,subject),summarise)
ddply(d, dataTiny,.(labels,subject), mean)
ddply(dataTiny,.(labels,subject), mean)
resultCols <- names(dataTiny)[! names(dataTiny) %in% c('labels', 'subject')]
df1 <- aggregate(cbind(resultCols) ~ labels + subject,
data = dataTiny,  FUN = mean)
dataTiny$labels <- mapvalues(dataTiny$labels, from = c("1", "2","3","4","5","6"), to = c("WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS", "SITTING", "STANDING" ,"LAYING"))
dataTiny <- datum[,filter]
#3. Uses descriptive activity names to name the activities in the data set
dataTiny$labels <- as.factor(dataTiny$labels)
dataTiny$subject <- as.factor(dataTiny$subject)
#4. Appropriately labels the data set with descriptive variable names.
library(plyr)
dataTiny$labels <- mapvalues(dataTiny$labels, from = c("1", "2","3","4","5","6"), to = c("WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS", "SITTING", "STANDING" ,"LAYING"))
resultCols <- names(dataTiny)[! names(dataTiny) %in% c('labels', 'subject')]
df1 <- aggregate(cbind(resultCols) ~ labels + subject,
data = dataTiny,  FUN = mean)
resultCols
df1 <- aggregate(cbind(resultCols) ~ labels + subject,  data = dataTiny,  FUN = mean)
View(dataTiny)
df1 <- aggregate(cbind(resultCols) ~ subject,  data = dataTiny,  FUN = mean)
df1 <- aggregate(cbind(resultCols) ~ labels+subject,  data = dataTiny,  FUN = mean)
df1 <- aggregate(resultCols ~ labels+subject,  data = dataTiny,  FUN = mean)
df1 <- aggregate(cbind(resultCols) ~ labels+subject,  data = dataTiny,  FUN = mean)
length(dataTiny$labels)
length(dataTiny[,fBodyBodyAccJerkMag-std()])
length(dataTiny[,'fBodyBodyAccJerkMag-std()'])
df1 <- aggregate(cbind(resultCols) ~ labels+subject,  data = dataTiny,  FUN = mean)
df2 <- aggregate(dataTiny[, 1:66], by = list(DF[, c(67,68)]), FUN = mean)
df2 <- aggregate(dataTiny[, 1:66], by = list(dataTiny[, c(67,68)]), FUN = mean)
df3 <- aggregate( . ~ labels+subject,  data = dataTiny,  FUN = mean)
View(df3)
tidyData <- aggregate( . ~ labels+subject,  data = dataTiny,  FUN = mean)
write.table(tidyData, file = 'data/tidy.txt', quote=T, row.name=FALSE)
